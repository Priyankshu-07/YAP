<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YAP - Video Chat</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .header {
            background: #667eea;
            color: white;
            padding: 20px;
            text-align: center;
        }

        .header h1 {
            font-size: 2em;
            font-weight: bold;
        }

        .main {
            padding: 30px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        .section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #e9ecef;
        }

        .section h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.2em;
        }

        .status {
            background: #ffc107;
            color: #856404;
            padding: 10px 15px;
            border-radius: 5px;
            text-align: center;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .status.connected {
            background: #28a745;
            color: white;
        }

        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background 0.3s;
        }

        .btn:hover {
            background: #5a6fd8;
        }

        .btn-danger {
            background: #dc3545;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-success {
            background: #28a745;
        }

        .btn-success:hover {
            background: #218838;
        }

        .chat-box {
            height: 250px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            overflow-y: auto;
        }

        .message {
            margin: 10px 0;
            padding: 8px 12px;
            border-radius: 15px;
            max-width: 80%;
        }

        .my-message {
            background: #667eea;
            color: white;
            margin-left: auto;
            text-align: right;
        }

        .other-message {
            background: #e9ecef;
            color: #333;
        }

        .input-group {
            display: flex;
            gap: 10px;
        }

        input[type="text"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        input[type="text"]:focus {
            outline: none;
            border-color: #667eea;
        }

        .video-section {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000;
            z-index: 1000;
        }

        #remoteVideo {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #localVideo {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 200px;
            height: 150px;
            border: 2px solid white;
            border-radius: 10px;
        }

        .controls {
            position: absolute;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 2000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .modal h2 {
            margin-bottom: 20px;
            color: #333;
        }

        .modal-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 20px;
        }

        @media (max-width: 768px) {
            .main {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            #localVideo {
                width: 120px;
                height: 90px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>YAP</h1>
            <p>Simple Video Chat</p>
        </div>

        <div class="main">
            <div class="section">
                <h3>ðŸ“¹ Video Call</h3>
                
                <div id="status" class="status">
                    Connecting...
                </div>

                <button id="startCall" class="btn">Start Call</button>
            </div>

            <div class="section">
                <h3>ðŸ’¬ Chat</h3>
                
                <div id="chatBox" class="chat-box"></div>

                <div class="input-group">
                    <input type="text" id="messageInput" placeholder="Type a message...">
                    <button id="sendMessage" class="btn">Send</button>
                </div>
            </div>
        </div>
    </div>

    <div id="videoSection" class="video-section">
        <video id="remoteVideo" autoplay></video>
        <video id="localVideo" autoplay muted></video>
        <div class="controls">
            <button id="endCall" class="btn btn-danger">End Call</button>
        </div>
    </div>

    <div id="incomingCallModal" class="modal">
        <div class="modal-content">
            <h2>ðŸ“ž Incoming Call</h2>
            <p>Someone wants to video chat!</p>
            <div class="modal-buttons">
                <button id="acceptCall" class="btn btn-success">Accept</button>
                <button id="rejectCall" class="btn btn-danger">Decline</button>
            </div>
        </div>
    </div>

    <script>
        // Simulated functionality (no real backend)
        let isConnected = false;
        let inCall = false;
        let localStream = null;

        // Get elements
        const startCallBtn = document.getElementById('startCall');
        const endCallBtn = document.getElementById('endCall');
        const sendMessageBtn = document.getElementById('sendMessage');
        const messageInput = document.getElementById('messageInput');
        const chatBox = document.getElementById('chatBox');
        const status = document.getElementById('status');
        const videoSection = document.getElementById('videoSection');
        const localVideo = document.getElementById('localVideo');
        const modal = document.getElementById('incomingCallModal');

        // Initialize
        setTimeout(() => {
            status.textContent = 'ðŸŸ¢ Connected! Ready to chat.';
            status.classList.add('connected');
            isConnected = true;
        }, 2000);

        // Event listeners
        startCallBtn.addEventListener('click', startCall);
        endCallBtn.addEventListener('click', endCall);
        sendMessageBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                addMessage(message, true);
                messageInput.value = '';
                
                // Simulate response
                setTimeout(() => {
                    addMessage("Hey! How are you?", false);
                }, 1000);
            }
        }

        function addMessage(message, isMyMessage) {
            const messageDiv = document.createElement('div');
            messageDiv.className = isMyMessage ? 'message my-message' : 'message other-message';
            messageDiv.textContent = message;
            chatBox.appendChild(messageDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        async function startCall() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({
                    video: true,
                    audio: true
                });
                
                localVideo.srcObject = localStream;
                videoSection.style.display = 'block';
                inCall = true;
                
                // Simulate incoming call for demo
                setTimeout(() => {
                    if (inCall) {
                        alert('Call connected!');
                    }
                }, 2000);
                
            } catch (error) {
                alert('Could not access camera/microphone');
            }
        }

        function endCall() {
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
            }
            
            videoSection.style.display = 'none';
            localVideo.srcObject = null;
            inCall = false;
        }

        // Add some demo messages
        setTimeout(() => {
            if (isConnected) {
                addMessage("Welcome to YAP!", false);
            }
        }, 3000);
    </script>
</body>
</html>