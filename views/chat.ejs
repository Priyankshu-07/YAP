<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Chat App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #video-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000;
            z-index: 1000;
        }
        #remoteVideo {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        #localVideo {
            position: absolute;
            bottom: 20px;
            right: 20px;
            width: 25%;
            max-width: 200px;
            border-radius: 8px;
            border: 2px solid #fff;
        }
        #call-controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 15px;
        }
        .control-btn {
            background: rgba(0,0,0,0.5);
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.2s;
        }
        .control-btn:hover {
            transform: scale(1.1);
        }
        .control-btn.active {
            background: #ff5c5c;
        }
        #hangup-btn {
            background: #ff5c5c;
        }
    </style>
</head>
<body class="bg-gray-100 h-screen flex flex-col">
    <!-- Video Call Container -->
    <div id="video-container">
        <video id="remoteVideo" autoplay playsinline></video>
        <video id="localVideo" autoplay muted playsinline></video>
        <div id="call-controls">
            <div id="camera-btn" class="control-btn">
                <svg width="24" height="18" viewBox="0 0 24 18" fill="white">
                    <path d="M23.525 2.149C23.365 2.05 23.183 2 23 2C22.847 2 22.694 2.035 22.553 2.105L20 3.382V3C20 1.346 18.654 0 17 0H3C1.346 0 0 1.346 0 3V15C0 16.654 1.346 18 3 18H17C18.654 18 20 16.654 20 15V14.618L22.553 15.895C22.694 15.965 22.847 16 23 16C23.183 16 23.365 15.95 23.525 15.851C23.82 15.668 24 15.347 24 15V3C24 2.653 23.82 2.332 23.525 2.149Z"/>
                </svg>
            </div>
            <div id="mic-btn" class="control-btn">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="white">
                    <path d="M10 12C12.21 12 14 10.21 14 8V4C14 1.79 12.21 0 10 0C7.79 0 6 1.79 6 4V8C6 10.21 7.79 12 10 12ZM17 8C17 11.53 14.39 14.44 11 14.93V18H15V20H5V18H9V14.93C5.61 14.44 3 11.53 3 8H1C1 12.07 4.06 15.44 8 15.93V18H6V20H14V18H12V15.93C15.94 15.44 19 12.07 19 8H17Z"/>
                </svg>
            </div>
            <div id="hangup-btn" class="control-btn">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
                    <path d="M12 9C10.343 9 9 10.343 9 12C9 13.657 10.343 15 12 15C13.657 15 15 13.657 15 12C15 10.343 13.657 9 12 9Z"/>
                    <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z"/>
                </svg>
            </div>
        </div>
    </div>

    <!-- Incoming Call Modal -->
    <div id="incoming-call" class="hidden fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg text-center">
            <h2 class="text-xl font-bold mb-4">Incoming Video Call</h2>
            <div class="flex justify-center gap-4">
                <button id="accept-call" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">Accept</button>
                <button id="reject-call" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">Reject</button>
            </div>
        </div>
    </div>

    <!-- Chat Interface -->
    <div class="flex-1 flex flex-col max-w-3xl mx-auto w-full bg-white shadow-lg h-full">
        <!-- Header -->
        <div class="bg-indigo-600 text-white p-4 flex justify-between items-center">
            <h1 class="text-xl font-bold">Video Chat</h1>
            <button id="start-call" class="bg-white text-indigo-600 px-4 py-2 rounded hover:bg-gray-100">Start Call</button>
        </div>

        <!-- Messages Container -->
        <div id="messages" class="flex-1 p-4 overflow-y-auto">
            <div id="waiting-msg" class="text-center text-gray-500 mt-20">
                Waiting for someone to connect...
            </div>
        </div>

        <!-- Message Input -->
        <div class="border-t p-4">
            <form id="message-form" class="flex gap-2">
                <input type="text" id="message-input" placeholder="Type your message" 
                       class="flex-1 border rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700">Send</button>
            </form>
        </div>
    </div>

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <script>
        const socket = io();
        let peerConnection;
        let localStream;
        let room;

        // DOM Elements
        const videoContainer = document.getElementById('video-container');
        const remoteVideo = document.getElementById('remoteVideo');
        const localVideo = document.getElementById('localVideo');
        const startCallBtn = document.getElementById('start-call');
        const messagesContainer = document.getElementById('messages');
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');
        const incomingCallModal = document.getElementById('incoming-call');
        const acceptCallBtn = document.getElementById('accept-call');
        const rejectCallBtn = document.getElementById('reject-call');
        const hangupBtn = document.getElementById('hangup-btn');
        const cameraBtn = document.getElementById('camera-btn');
        const micBtn = document.getElementById('mic-btn');
        const waitingMsg = document.getElementById('waiting-msg');

        // Join room automatically
        socket.emit('joinroom');

        // Socket Event Handlers
        socket.on('joined', (roomName) => {
            room = roomName;
            waitingMsg.classList.add('hidden');
            console.log('Joined room:', room);
        });

        socket.on('message', (message) => {
            addMessage(message, false);
        });

        socket.on('incoming call', () => {
            incomingCallModal.classList.remove('hidden');
        });

        socket.on('callAccepted', async () => {
            incomingCallModal.classList.add('hidden');
            await startVideoCall();
        });

        socket.on('callRejected', () => {
            incomingCallModal.classList.add('hidden');
            alert('The user rejected your call');
        });

        socket.on('signalingMessage', async (data) => {
            if (!peerConnection) await startVideoCall();
            
            try {
                const message = JSON.parse(data.message);
                
                if (message.type === 'offer') {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(message.offer));
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    
                    socket.emit('signalingMessage', {
                        room,
                        message: JSON.stringify({
                            type: 'answer',
                            answer: peerConnection.localDescription
                        })
                    });
                    
                } else if (message.type === 'answer') {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(message.answer));
                    
                } else if (message.type === 'candidate') {
                    try {
                        await peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate));
                    } catch (e) {
                        console.log('Error adding ICE candidate:', e);
                    }
                    
                } else if (message.type === 'hangup') {
                    endCall();
                }
            } catch (error) {
                console.error('Signaling error:', error);
                endCall();
            }
        });

        // UI Event Listeners
        startCallBtn.addEventListener('click', () => {
            if (room) {
                socket.emit('startVideoCall', { room });
                startVideoCall();
            }
        });

        acceptCallBtn.addEventListener('click', () => {
            incomingCallModal.classList.add('hidden');
            socket.emit('acceptCall', { room });
            startVideoCall();
        });

        rejectCallBtn.addEventListener('click', () => {
            incomingCallModal.classList.add('hidden');
            socket.emit('RejectCall', { room });
        });

        hangupBtn.addEventListener('click', endCall);

        cameraBtn.addEventListener('click', () => {
            if (localStream) {
                const videoTrack = localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = !videoTrack.enabled;
                    cameraBtn.classList.toggle('active', !videoTrack.enabled);
                }
            }
        });

        micBtn.addEventListener('click', () => {
            if (localStream) {
                const audioTrack = localStream.getAudioTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = !audioTrack.enabled;
                    micBtn.classList.toggle('active', !audioTrack.enabled);
                }
            }
        });

        messageForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const message = messageInput.value.trim();
            if (message && room) {
                socket.emit('message', { room, message });
                addMessage(message, true);
                messageInput.value = '';
            }
        });

        // Video Call Functions
        async function startVideoCall() {
            try {
                videoContainer.style.display = 'block';
                
                // Get user media
                localStream = await navigator.mediaDevices.getUserMedia({ 
                    audio: true, 
                    video: true 
                });
                
                // Display local video
                localVideo.srcObject = localStream;
                localVideo.onloadedmetadata = () => localVideo.play();
                
                // Create peer connection
                peerConnection = new RTCPeerConnection({
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:stun1.l.google.com:19302' },
                        { urls: 'stun:stun2.l.google.com:19302' }
                    ]
                });
                
                // Add local tracks
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });
                
                // Handle remote stream
                peerConnection.ontrack = (event) => {
                    if (!remoteVideo.srcObject) {
                        remoteVideo.srcObject = event.streams[0];
                        remoteVideo.onloadedmetadata = () => remoteVideo.play();
                    }
                };
                
                // ICE candidate handling
                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        socket.emit('signalingMessage', {
                            room,
                            message: JSON.stringify({
                                type: 'candidate',
                                candidate: event.candidate
                            })
                        });
                    }
                };
                
                // Connection state monitoring
                peerConnection.onconnectionstatechange = () => {
                    if (peerConnection.connectionState === 'failed' || 
                        peerConnection.connectionState === 'disconnected') {
                        endCall();
                    }
                };
                
                // Create and send offer
                const offer = await peerConnection.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                });
                
                await peerConnection.setLocalDescription(offer);
                
                socket.emit('signalingMessage', {
                    room,
                    message: JSON.stringify({
                        type: 'offer',
                        offer: peerConnection.localDescription
                    })
                });
                
            } catch (error) {
                console.error('Error starting call:', error);
                endCall();
                alert('Could not access camera/microphone. Please check permissions.');
            }
        }

        function endCall() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localVideo.srcObject = null;
            }
            
            if (remoteVideo.srcObject) {
                remoteVideo.srcObject.getTracks().forEach(track => track.stop());
                remoteVideo.srcObject = null;
            }
            
            videoContainer.style.display = 'none';
            
            // Notify other peer
            if (room) {
                socket.emit('signalingMessage', {
                    room,
                    message: JSON.stringify({ type: 'hangup' })
                });
            }
        }

        function addMessage(message, isOwn) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `mb-3 flex ${isOwn ? 'justify-end' : 'justify-start'}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = `px-4 py-2 rounded-lg max-w-xs ${isOwn ? 'bg-indigo-600 text-white' : 'bg-gray-200'}`;
            contentDiv.textContent = message;
            
            messageDiv.appendChild(contentDiv);
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            if (waitingMsg && !waitingMsg.classList.contains('hidden')) {
                waitingMsg.classList.add('hidden');
            }
        }
    </script>
</body>
</html>
